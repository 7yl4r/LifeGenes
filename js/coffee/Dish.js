// Generated by CoffeeScript 1.4.0
(function() {
  var BoolArray, Cell, Dish;

  Cell = require('../coffee/Cell');

  BoolArray = (function() {

    function BoolArray(rows, cols) {
      return (function() {
        var _i, _results;
        _results = [];
        for (_i = 1; 1 <= rows ? _i <= rows : _i >= rows; 1 <= rows ? _i++ : _i--) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (_j = 1; 1 <= cols ? _j <= cols : _j >= cols; 1 <= cols ? _j++ : _j--) {
              _results1.push(0);
            }
            return _results1;
          })());
        }
        return _results;
      })();
    }

    return BoolArray;

  })();

  Dish = (function() {

    function Dish(rows, cols, displayDiv) {
      if (displayDiv == null) {
        displayDiv = '';
      }
      this.generation = 0;
      this.rowCount = rows;
      this.colCount = cols;
      this.cellCount = rows * cols;
      this.renderDivSelector = displayDiv;
      this.cells = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_i = 1, _ref = this.rowCount; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (_j = 1, _ref1 = this.colCount; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--) {
              _results1.push(new Cell());
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this._cell_states = new BoolArray(this.rowCount, this.colCount);
      if (typeof document !== "undefined" && document !== null) {
        $(document).on("set-environment-type", function(evt, selection) {
          switch (selection) {
            case "Game_of_Life":
              return $(document).on('click', '.cell', function(evt) {
                return main_dish.cellClick(this);
              });
            default:
              console.log('unknown env type:', selection);
              throw Error('unknown env type');
          }
        });
      }
      this.TIMER_DELAY = 10;
      this.NEIGHBORHOOD_SIZE = 1;
    }

    Dish.prototype.start = function() {
      var run,
        _this = this;
      this.running = true;
      run = function() {
        if (_this.running) {
          _this.step();
          setTimeout(run, _this.TIMER_DELAY);
          return true;
        } else {
          return false;
        }
      };
      return run();
    };

    Dish.prototype.stop = function() {
      return this.running = false;
    };

    Dish.prototype.step = function() {
      var colN, new_states, rowN;
      console.log('generation ', this.generation, '->', this.generation + 1);
      new_states = new BoolArray(this.rowCount, this.colCount);
      for (rowN in this.cells) {
        for (colN in this.cells[rowN]) {
          new_states[rowN][colN] = this.runCell(rowN, colN);
        }
      }
      this._cell_states = new_states;
      for (rowN in this.cells) {
        for (colN in this.cells[rowN]) {
          this.setCellState(rowN, colN, new_states[rowN][colN]);
        }
      }
      this.generation += 1;
      this.render();
      return this.generation;
    };

    Dish.prototype.runCell = function(row, col) {
      var neighbors;
      neighbors = this.getNeighborCount(row, col);
      if (neighbors < 2) {
        return 0;
      } else if (neighbors > 3) {
        return 0;
      } else if (neighbors === 3) {
        return 1;
      } else {
        return this.getCellState(row, col);
      }
    };

    Dish.prototype.getCellState = function(row, col) {
      return this.getCell(row, col).getState();
    };

    Dish.prototype.getCell = function(row, col) {
      var maxCol, maxRow;
      maxRow = this.rowCount;
      maxCol = this.colCount;
      row %= maxRow;
      col %= maxCol;
      if (col < 0) {
        col = maxCol + col;
      }
      if (row < 0) {
        row = maxRow + row;
      }
      if (col > maxCol) {
        col -= maxCol;
      }
      if (row > maxRow) {
        row -= maxRow;
      }
      return this.cells[row][col];
    };

    Dish.prototype.getNeighborCount = function(R, C) {
      var i, j, neighbors;
      R = parseInt(R);
      C = parseInt(C);
      neighbors = 0;
      i = -this.NEIGHBORHOOD_SIZE;
      while (i <= this.NEIGHBORHOOD_SIZE) {
        j = -this.NEIGHBORHOOD_SIZE;
        while (j <= this.NEIGHBORHOOD_SIZE) {
          if (i === 0 && j === 0) {
            j += 1;
          } else {
            neighbors += this.getCellState(R + i, C + j);
            j += 1;
          }
        }
        i += 1;
      }
      return neighbors;
    };

    Dish.prototype.cellClick = function(cellEl) {
      this.toggleCell(cellEl);
    };

    Dish.prototype.toggleCell = function(cellEl) {
      if (cellEl.getAttribute('data-state') === '1') {
        cellEl.setAttribute('data-state', 0);
        this.setCellState(cellEl.getAttribute('data-cell-row'), cellEl.getAttribute('data-cell-col'), 0);
      } else {
        cellEl.setAttribute('data-state', 1);
        this.setCellState(cellEl.getAttribute('data-cell-row'), cellEl.getAttribute('data-cell-col'), 1);
      }
    };

    Dish.prototype.setCellState = function(row, col, newState) {
      return this.getCell(row, col).setState(newState);
    };

    Dish.prototype.render = function(renderDivSelector) {
      if (renderDivSelector == null) {
        renderDivSelector = this.renderDivSelector;
      }
      if (renderDivSelector != null) {
        return dust.render('cellDish', {
          cell_states: main_dish._cell_states
        }, function(err, out) {
          $(renderDivSelector).html(out);
          if (err) {
            return console.log(err);
          }
        });
      } else {
        return console.log('dish unrendered: no render div set');
      }
    };

    return Dish;

  })();

  try {
    window.Dish = Dish;
  } catch (error) {
    module.exports = Dish;
  }

}).call(this);
