// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, DNA,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DNA = require('./DNA');

  Cell = (function() {

    function Cell(row, col, parents) {
      this.state = 0;
      this.row = row;
      this.col = col;
      this.proteins = {};
      this.proteins[Cell.PROTEIN_CODE.alwaysOn] = {
        name: Cell.PROTEIN_CODE.alwaysOn,
        amount: 1
      };
      this.proteins[Cell.PROTEIN_CODE.newCell] = {
        name: Cell.PROTEIN_CODE.newCell,
        amount: 1
      };
      this.DNA = new DNA(parents);
      this.setWatchedValues();
    }

    Cell.PROTEIN_CODE = {
      alwaysOn: 'awysOn',
      newCell: 'newCel',
      cellDeath: 'deathh',
      cellEther: 'etherr'
    };

    Cell.prototype.setWatchedValues = function() {
      var oneHundredPercent;
      oneHundredPercent = 4;
      if (this.proteins[Cell.PROTEIN_CODE.alwaysOn] != null) {
        this.p1 = this.proteins[Cell.PROTEIN_CODE.alwaysOn].amount / oneHundredPercent;
      } else {
        this.p1 = 0;
      }
      if (this.proteins[Cell.PROTEIN_CODE.newCell] != null) {
        this.p2 = this.proteins[Cell.PROTEIN_CODE.newCell].amount / oneHundredPercent;
      } else {
        this.p2 = 0;
      }
      if (this.proteins[Cell.PROTEIN_CODE.cellDeath] != null) {
        this.p3 = this.proteins[Cell.PROTEIN_CODE.cellDeath].amount / oneHundredPercent;
      } else {
        this.p3 = 0;
      }
      if (this.proteins[Cell.PROTEIN_CODE.cellEther] != null) {
        this.p4 = this.proteins[Cell.PROTEIN_CODE.cellEther].amount / oneHundredPercent;
      } else {
        this.p4 = 0;
      }
    };

    Cell.prototype.setState = function(newState) {
      return this.state = newState;
    };

    Cell.prototype.getState = function() {
      return this.state;
    };

    Cell.prototype.runProteins = function(dish) {
      var inProtein, outProtein, outputProteins, _i, _len, _ref;
      if (this.state > 0) {
        for (inProtein in this.proteins) {
          outputProteins = this.DNA.getProteinResponse(this.proteins[inProtein]);
          for (_i = 0, _len = outputProteins.length; _i < _len; _i++) {
            outProtein = outputProteins[_i];
            if (!this.DNA.connectionSilencedBy(this.proteins[inProtein], outProtein, this.proteins)) {
              if (__indexOf.call(this.proteins, outProtein) < 0) {
                this.proteins[outProtein.name] = outProtein;
              } else {
                this.proteins[outProtein.name].amount += outProtein.amount;
              }
            }
          }
        }
        this.setWatchedValues();
        if (_ref = Cell.PROTEIN_CODE.cellDeath, __indexOf.call(this.proteins, _ref) >= 0) {
          return 0;
        } else {
          return 1;
        }
      }
    };

    Cell.prototype.runGoL = function(dish) {
      var neighbors;
      neighbors = dish.getNeighborCount(this.row, this.col);
      if (neighbors < 2) {
        return 0;
      } else if (neighbors > 3) {
        return 0;
      } else if (neighbors === 3) {
        return 1;
      } else {
        return dish.getCellState(this.row, this.col);
      }
    };

    Cell.prototype.step = function(dish) {
      return 0;
    };

    return Cell;

  })();

  module.exports = Cell;

}).call(this);
