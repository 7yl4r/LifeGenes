// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, DNA,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DNA = require('./DNA');

  Cell = (function() {

    function Cell(row, col, parent1, parent2) {
      this.state = 0;
      this.row = row;
      this.col = col;
      this.proteins = [Cell.PROTEINS.alwaysOn, Cell.PROTEINS.newCell];
      this.DNA = new DNA(parent1, parent2);
    }

    Cell.PROTEINS = {
      alwaysOn: 'awysOn',
      newCell: 'newCel'
    };

    Cell.COMPUTE = {
      GoL: 0,
      proteins: 1
    };

    Cell.prototype.setState = function(newState) {
      return this.state = newState;
    };

    Cell.prototype.getState = function() {
      return this.state;
    };

    Cell.prototype.run = function(dish, computeType) {
      if (computeType == null) {
        computeType = Cell.COMPUTE.GoL;
      }
      switch (computeType) {
        case Cell.COMPUTE.GoL:
          return this.runGoL(dish);
        case Cell.COMPUTE.proteins:
          return this.runProteins(dish);
        default:
          throw Error('computeType not recognized');
      }
    };

    Cell.prototype.runProteins = function(dish) {
      var inProtein, outProtein, outputProteins, _i, _j, _len, _len1, _ref;
      _ref = this.proteins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        inProtein = _ref[_i];
        outputProteins = this.DNA.getProteinResponse(inProtein);
        for (_j = 0, _len1 = outputProteins.length; _j < _len1; _j++) {
          outProtein = outputProteins[_j];
          if (!this.DNA.connectionSilencedBy(inProtein, outProtein, this.proteins)) {
            console.log(inProtein, ' yields ', outProtein);
            if (__indexOf.call(this.proteins, outProtein) < 0) {
              this.proteins.push(outProtein);
            } else {
              console.log('protein already here');
            }
          }
        }
      }
      return true;
    };

    Cell.prototype.runGoL = function(dish) {
      var neighbors;
      neighbors = dish.getNeighborCount(this.row, this.col);
      if (neighbors < 2) {
        return 0;
      } else if (neighbors > 3) {
        return 0;
      } else if (neighbors === 3) {
        return 1;
      } else {
        return dish.getCellState(this.row, this.col);
      }
    };

    Cell.prototype.step = function(dish) {
      return 0;
    };

    return Cell;

  })();

  module.exports = Cell;

}).call(this);
