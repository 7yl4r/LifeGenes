// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, GUI,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Cell = require('./Cell');

  GUI = (function() {

    function GUI(dish, type) {
      if (type == null) {
        type = GUI.TYPE.master;
      }
      this.type = type;
      this.dish = dish;
      this.proteinsShowing = true;
      $(document).on("set-environment-type", function(event, newEnvType) {
        console.log("switching environment type to ", newEnvType);
        switch (newEnvType) {
          case ENVIRONMENT_TYPE["enum"][0]:
            return main_dish.computeType = Dish.COMPUTE.GoL;
          case ENVIRONMENT_TYPE["enum"][1]:
            return main_dish.computeType = Dish.COMPUTE.cumulativeProteins;
        }
      });
    }

    GUI.TYPE = {
      master: "master"
    };

    GUI.prototype.setInterfaceType = function(type) {
      switch (type) {
        case this.type:
          break;
        case __indexOf.call(GUI.TYPE, type) >= 0:
          return console.log("switching interface type to ", type);
        default:
          throw Error("unkown interface type requested");
      }
    };

    GUI.prototype.cellClick = function(cellEl) {
      this.toggleCell(cellEl);
    };

    GUI.prototype.toggleCell = function(cellEl) {
      if (cellEl.getAttribute('data-state') === '1') {
        cellEl.setAttribute('data-state', 0);
        this.dish.setCellState(cellEl.getAttribute('data-cell-row'), cellEl.getAttribute('data-cell-col'), 0);
      } else {
        cellEl.setAttribute('data-state', 1);
        this.dish.setCellState(cellEl.getAttribute('data-cell-row'), cellEl.getAttribute('data-cell-col'), 1);
      }
    };

    GUI.prototype.proteinDisplayToggle = function() {
      switch (this.proteinsShowing) {
        case true:
          $('.protein').hide();
          return this.proteinsShowing = false;
        case false:
          $('.protein').show();
          return this.proteinsShowing = true;
        default:
          throw Error('@proteinsShowing flag is non-boolean');
      }
    };

    return GUI;

  })();

  module.exports = GUI;

}).call(this);
