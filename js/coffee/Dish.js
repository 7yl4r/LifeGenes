// Generated by CoffeeScript 1.4.0
(function() {
  var Dish;

  Dish = (function() {

    function Dish(rows, cols) {
      this.generation = 0;
      this.rowCount = rows;
      this.colCount = cols;
      this.cellCount = rows * cols;
      this.cell_states = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_i = 1, _ref = this.rowCount; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (_j = 1, _ref1 = this.colCount; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--) {
              _results1.push(0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      $(document).on("set-environment-type", function(evt, selection) {
        switch (selection) {
          case "Game_of_Life":
            return $('.cell').click(function(evt) {
              return main_dish.cellClick(this);
            });
          default:
            console.log('unknown env type:', selection);
            throw Error('unknown env type');
        }
      });
    }

    Dish.prototype.step = function() {
      console.log('generation ', this.generation, '->', this.generation + 1);
      this.generation += 1;
    };

    Dish.prototype.cellClick = function(cellEl) {
      this.toggleCell(cellEl);
    };

    Dish.prototype.toggleCell = function(cellEl) {
      if (cellEl.classList.contains('live-cell')) {
        cellEl.classList.remove('live-cell');
      } else {
        cellEl.classList.add('live-cell');
      }
    };

    return Dish;

  })();

  try {
    window.Dish = Dish;
  } catch (error) {
    module.exports = Dish;
  }

}).call(this);
