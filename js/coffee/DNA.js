// Generated by CoffeeScript 1.4.0
(function() {
  var ConnectionOperator, DNA, ProteinNode,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ConnectionOperator = (function() {

    function ConnectionOperator(fromCode, toCode, operatorBehavior) {
      var operators;
      operators = ['silencer'];
      if (__indexOf.call(operators, operatorBehavior) >= 0) {
        this.operator = operatorBehavior;
        this.from = fromCode;
        this.to = toCode;
      } else {
        throw Error('operatorBehavior not recognized');
      }
    }

    return ConnectionOperator;

  })();

  ProteinNode = (function() {

    function ProteinNode(proteinCode) {
      this.proteinCode = proteinCode;
      this.connections = [];
      this.silences = [];
    }

    return ProteinNode;

  })();

  DNA = (function() {

    function DNA(parents, doNotGenerate) {
      if (doNotGenerate == null) {
        doNotGenerate = false;
      }
      this._nodes = [];
      if (doNotGenerate) {
        return;
      } else if (parents != null) {
        console.log('inheriting...');
      } else {
        console.log('randomness');
      }
    }

    DNA.prototype.clone = function() {
      var newDNA, node, _i, _len, _ref;
      newDNA = new DNA([], true);
      _ref = dna.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        newDNA.nodes.push(node.clone());
      }
      return newDNA;
    };

    DNA.prototype.getProteinResponse = function(inputProtein) {
      return ['NotImp'];
    };

    DNA.prototype.connectionSilencedBy = function(inProtein, outProtein, proteinList) {
      return false;
    };

    return DNA;

  })();

  module.exports = DNA;

}).call(this);
