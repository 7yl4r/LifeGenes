// Generated by CoffeeScript 1.4.0
(function() {
  var Dish,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dish = (function() {

    function Dish(rows, cols, displayDiv) {
      if (displayDiv == null) {
        displayDiv = '';
      }
      this.render = __bind(this.render, this);

      this.toggleCell = __bind(this.toggleCell, this);

      this.cellClick = __bind(this.cellClick, this);

      this.getNeighborCount = __bind(this.getNeighborCount, this);

      this.getCell = __bind(this.getCell, this);

      this.runCell = __bind(this.runCell, this);

      this.step = __bind(this.step, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

      this.generation = 0;
      this.rowCount = rows;
      this.colCount = cols;
      this.cellCount = rows * cols;
      this.cell_states = (function() {
        var _i, _ref, _results;
        _results = [];
        for (_i = 1, _ref = this.rowCount; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (_j = 1, _ref1 = this.colCount; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--) {
              _results1.push(0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.renderDivSelector = displayDiv;
      $(document).on("set-environment-type", function(evt, selection) {
        switch (selection) {
          case "Game_of_Life":
            return $('.cell').click(function(evt) {
              return main_dish.cellClick(this);
            });
          default:
            console.log('unknown env type:', selection);
            throw Error('unknown env type');
        }
      });
      this.TIMER_DELAY = 10;
      this.NEIGHBORHOOD_SIZE = 1;
    }

    Dish.prototype.start = function() {
      var run;
      this.running = true;
      run = function() {
        if (this.running) {
          this.step();
          setTimeout(this.step, this.TIMER_DELAY);
          return true;
        } else {
          return false;
        }
      };
      return run();
    };

    Dish.prototype.stop = function() {
      return this.running = false;
    };

    Dish.prototype.step = function() {
      var colN, new_states, rowN;
      console.log(this.cell_states);
      console.log(this.cell_states[0]);
      console.log(this.cell_states[0][0]);
      console.log('generation ', this.generation, '->', this.generation + 1);
      new_states = this.cell_states.slice(0);
      console.log(this.cell_states);
      for (rowN in this.cell_states) {
        for (colN in this.cell_states[rowN]) {
          new_states[rowN][colN] = this.runCell(rowN, colN, this.cell_states);
          console.log(this.cell_states[rowN][colN], '->', new_states[rowN][colN]);
        }
      }
      this.cell_states = new_states;
      this.generation += 1;
      this.render();
      return this.generation;
    };

    Dish.prototype.runCell = function(row, col, cellStates) {
      var neighbors, newCells;
      newCells = cellStates.slice(0);
      neighbors = this.getNeighborCount(row, col, cellStates);
      if (neighbors < 2) {
        return 0;
      } else if (neighbors > 3) {
        return 0;
      } else if (neighbors === 3) {
        return 1;
      } else {
        return cellStates[row][col];
      }
    };

    Dish.prototype.getCell = function(row, col, cells) {
      var maxCol, maxRow;
      if (cells == null) {
        cells = this.cell_states;
      }
      maxRow = s.length - 1;
      maxCol = s[0].length - 1;
      row %= maxRow;
      col %= maxCol;
      if (col < 0) {
        col = maxCol + col;
      }
      if (row < 0) {
        row = maxRow + row;
      }
      if (col > maxCol) {
        col -= maxCol;
      }
      if (row > maxRow) {
        row -= maxRow;
      }
      return cells[row][col];
    };

    Dish.prototype.getNeighborCount = function(R, C, S) {
      var i, j, neighbors;
      neighbors = 0;
      i = -this.NEIGHBORHOOD_SIZE;
      while (i <= this.NIEGHBORHOOD_SIZE) {
        j = -this.NEIGHBORHOOD_SIZE;
        while (j <= this.NEIGHBORHOOD_SIZE) {
          if (i + j !== 0) {
            neighbors += this.getCell(R + i, C + j, S);
          }
          j += 1;
        }
        i += 1;
      }
      return neighbors;
    };

    Dish.prototype.cellClick = function(cellEl) {
      this.toggleCell(cellEl);
    };

    Dish.prototype.toggleCell = function(cellEl) {
      if (cellEl.classList.contains('live-cell')) {
        cellEl.classList.remove('live-cell');
        this.cell_states[cellEl.getAttribute('data-cell-row')][cellEl.getAttribute('data-cell-col')] = 0;
      } else {
        cellEl.classList.add('live-cell');
        this.cell_states[cellEl.getAttribute('data-cell-row')][cellEl.getAttribute('data-cell-col')] = 1;
      }
    };

    Dish.prototype.render = function(renderDivSelector) {
      if (renderDivSelector == null) {
        renderDivSelector = this.renderDivSelector;
      }
      if (renderDivSelector != null) {
        return dust.render('cellDish', {
          cell_states: main_dish.cell_states
        }, function(err, out) {
          $(renderDivSelector).html(out);
          if (err) {
            return console.log(err);
          }
        });
      } else {
        return console.log('dish unrendered: no render div set');
      }
    };

    return Dish;

  })();

  try {
    window.Dish = Dish;
  } catch (error) {
    module.exports = Dish;
  }

}).call(this);
