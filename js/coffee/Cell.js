// Generated by CoffeeScript 1.4.0
(function() {
  var Cell, DNA, PROTEINS,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DNA = require('./DNA');

  PROTEINS = {
    alwaysOn: 'awysOn',
    newCell: 'newCel'
  };

  Cell = (function() {

    function Cell(parent1, parent2) {
      this.state = 0;
      this.proteins = [PROTEINS.alwaysOn, PROTEINS.newCell];
      this.DNA = new DNA(parent1, parent2);
    }

    Cell.prototype.setState = function(newState) {
      return this.state = newState;
    };

    Cell.prototype.getState = function() {
      return this.state;
    };

    Cell.prototype.run = function(dish) {
      var inProtein, outProtein, outputProteins, _i, _j, _len, _len1, _ref;
      _ref = this.proteins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        inProtein = _ref[_i];
        outputProteins = this.DNA.getProteinResponse(inProtein);
        for (_j = 0, _len1 = outputProteins.length; _j < _len1; _j++) {
          outProtein = outputProteins[_j];
          if (!this.DNA.connectionSilencedBy(inProtein, outProtein, this.proteins)) {
            console.log(inProtein, ' yields ', outProtein);
            if (__indexOf.call(this.proteins, outProtein) < 0) {
              this.proteins.push(outProtein);
            } else {
              console.log('protein already here');
            }
          }
        }
      }
      return true;
    };

    Cell.prototype.step = function(dish) {
      return 0;
    };

    return Cell;

  })();

  module.exports = Cell;

}).call(this);
